@Plan:name('global_FreqPerDay')
@Plan:description('ExecutionPlan for global_FreqPerDay')


@Import('org.wso2.throttle.processed.request.stream:1.0.0')
define stream RequestStream (messageID string, appKey string, appTier string, subscriptionKey string, apiKey string, apiTier string, subscriptionTier string, resourceKey string, resourceTier string, userId string,  apiContext string, apiVersion string, appTenant string, apiTenant string, appId string, apiName string, propertiesMap string);

@Export('org.wso2.throttle.globalThrottle.stream:1.0.0')
define stream GlobalThrottleStream (throttleKey string, isThrottled bool, expiryTimeStamp long);


@From(eventtable='rdbms', datasource.name='WSO2_OPEN_BANKING_DB', table.name='BG_ACCOUNT_INITIALIZATION')
define table BG_ACCOUNT_INITIALIZATION(CONSENT_ID string, X_REQUEST_ID string, PSU_ID string, PSU_ID_TYPE string, PSU_CORPORATE_ID string, PSU_CORPORATE_ID_TYPE string, CONSENT_STATUS string, CONSENT_STATUS_UPDATE_DATETIME string, APP_ID int, TPP_UNIQUE_ID string, FREQUENCY_PER_DAY int, API_VERSION string);


from RequestStream
select userId, apiContext, appId, convert(appId, 'int') as applicationId
insert into tempStream;

from BG_ACCOUNT_INITIALIZATION as a
join tempStream as s on a.PSU_ID == s.userId and  a.CONSENT_STATUS == 'valid' and a.APP_ID == s.applicationId
select userId, appId, apiContext, (apiContext=='{API_CONTEXT}')  as isEligible, FREQUENCY_PER_DAY, str:concat(userId,':', appId,':',apiContext) as throttleKey
insert into EligibilityStream;

from EligibilityStream[isEligible==true]#throttler:timeBatch(1 day)
select throttleKey, (count(throttleKey) >= FREQUENCY_PER_DAY) as isThrottled, expiryTimeStamp group by throttleKey
insert all events into ResultStream;

from ResultStream#throttler:emitOnStateChange(throttleKey, isThrottled)
select *
insert into GlobalThrottleStream;

