{
	"app" : "ccportal",
	"applicationType" : "oauth2",
	"tenantDomain": "carbon.super",
	"pagination" : {
		"limit" : 11,
		"actualLimit" : 10,
		"offset": 0
	},
	"ccportalRoles" : ["Internal/CustomerCareOfficer"],
	"consentStatus" : ["Revoked", "Authorised", "AwaitingAuthorisation", "AcceptedTechnicalValidation", "AcceptedCustomerProfile"],
	"DeployedSpecification" : "AU",

	"consentStatuses" : {
		"UKAccount" : ["Authorised","Revoked", "Rejected"],
		"BERLINAccount" : ["received", "rejected", "partiallyAuthorised", "valid", "revokedByPsu", "expired", "terminatedByTpp"],
		"UKPayment" : ["Authorised", "AwaitingAuthorisation", "AcceptedTechnicalValidation", "AcceptedCustomerProfile", "Consumed", "Rejected"],
		"BERLINPayment" : ["Received", "Rejected", "AcceptedCustomerProfile"],
		"UKCof" : ["AwaitingAuthorisation","Authorised","Revoked", "Rejected"]
	},

	"ssoConfiguration" : {
		"enabled" : "false",
		"issuer" : "ccportal",
		"identityProviderURL" : "https://localhost:9446/samlsso",
		"keyStorePassword" : "",
		"identityAlias" : "",
		"responseSigningEnabled":"true",
		"assertionSigningEnabled":"true",
		"verifyAssertionValidityPeriod":"true",
		"timestampSkewInSeconds":"300",
		"audienceRestrictionsEnabled":"true",
		"keyStoreName" :"",
		"passive" : "true",
		"signRequests" : "true",
		"assertionEncryptionEnabled" : "false",
		"idpInit" : "false",
		"idpInitSSOURL" : "https://localhost:9446/samlsso?spEntityID=ccportal",
		"loginUserNameAttribute" : ""
		//"identityProviderLogoutURL" : "https://localhost:9446/samlsso",
		//"externalLogoutPage" : "https://localhost:9446/samlsso?slo=true"
		//"acsURL" : "https://localhost:9446/ccportal/jagg/jaggery_acs.jag", //In passive or request signing mode, use only if default Assertion Consumer Service URL needs to be overidden
		//"nameIdPolicy" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", //If not specified, 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified' will be used
	},
	"reverseProxy" : {
		"enabled" : false,    // values true , false , "auto" - will look for  X-Forwarded-* headers
		"host" : "sample.proxydomain.com", // If reverse proxy do not have a domain name use IP
		"context":""
		//, "regContext":"" // Use only if different path is used for registry
	}
}
