/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 Inc. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein is strictly forbidden, unless permitted by WSO2 in accordance with
 * the WSO2 Commercial License available at http://wso2.com/licenses.
 * For specific language governing the permissions and limitations under this
 * license, please see the license as well as any agreement youâ€™ve entered into
 * with WSO2 governing the purchase of this software and any associated services.
 */

@App:name("GetInvocationDataApp")

@App:description('API Invocation status retrieval App for the given time frame')

@Source(type = 'http-request',
     source.id='source',
     receiver.url='http://obbi-worker:8007/InvocationData/StatusCheckStream',
     basic.auth.enabled='false',
     @map(type = 'json',@attributes(MESSAGE_ID='trp:messageId', CHECK_STATUS='event.name',fromDate='event.fromDate',toDate='event.toDate')))
define stream StatusCheckStream (MESSAGE_ID string, CHECK_STATUS string, fromDate string, toDate string);

@sink(type='http-response', source.id='source', message.id='{{MESSAGE_ID}}', @map(type='json'))
define stream OutputStream(MESSAGE_ID string, RECEIVED_REQUESTS OBJECT, FAULTY_INVOCATIONS OBJECT, CDR_RULE_VIOLATIONS OBJECT);

define function getErrorCountsObject[JavaScript] return object {
  var tooManyRequests = data[0];
  var forbidden = data[1];
  var badRequest = data[2];
  var unauthorized = data[3];
  var notFound = data[4];
  var notAcceptable = data[5];
  var unprocessable = data[6];
  var obj = {TOO_MANY_REQUESTS: tooManyRequests, FORBIDDEN: forbidden, BAD_REQUEST: badRequest, UNAUTHORIZED: unauthorized, NOT_FOUND: notFound, NOT_ACCEPTABLE: notAcceptable, UNPROCESSABLE: unprocessable};
  return obj;

};

define function getCDRRuleViolations[JavaScript] return object {
    var invalidAdrStatus = data[0];
    var invalidSoftwareProductStatus = data[1];
    var invalidConsentStatus = data[2];
    var consentIsRevoked = data[3];
    var unsupportedVersion = data[4];
    var invalidAccount = data[5];
    var unavailableAccount = data[6];
    var invalidResource = data[7];

    var obj = { INVALID_ADR_STATUS: invalidAdrStatus, INVALID_ADR_SOFTWARE_PRODUCT_STATUS: invalidSoftwareProductStatus, INVALID_CONSENT_STATUS: invalidConsentStatus, CONSENT_IS_REVOKED: consentIsRevoked, UNSUPPORTED_VERSION: unsupportedVersion, INVALID_BANKING_ACCOUNT: invalidAccount, UNAVAILABLE_BANKING_ACCOUNT: unavailableAccount, INVALID_RESOURCE: invalidResource};
    return obj;
};

define function getBankingAPIInvocationsObject[JavaScript] return object {
    var totalCalls = data[0];
    var ProductEndpointCalls = data[1];
    var consumerEndpointCallsByUser = data[2];
    var consumerEndpointCallsByADR = data[3];

    var obj = { TOTAL_CALLS: totalCalls, PRODUCT_ENDPOINT_CALLS: ProductEndpointCalls, CONSUMER_DATA_REQUESTS_BY_USER: consumerEndpointCallsByUser, CONSUMER_DATA_REQUESTS_BY_ADR: consumerEndpointCallsByADR};
    return obj;
};


from StatusCheckStream#window.timeBatch(1 sec)#rdbms:query('OB_REPORTING_DB', 'BANKING_ENDPOINT_CALLS LONG, PRODUCT_ENDPOINT_CALLS LONG, CONSUMER_ENDPOINT_CALLS_BY_USER LONG, CONSUMER_ENDPOINT_CALLS_BY_ADR LONG', "select ( select COUNT(*) from API_INVOCATION_RAW_DATA where ELECTED_RESOURCE like '%banking%' AND (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS BANKING_ENDPOINT_CALLS, ( select COUNT(*) from API_INVOCATION_RAW_DATA where ELECTED_RESOURCE like '%products%' AND (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS PRODUCT_ENDPOINT_CALLS, ( select COUNT(*) from API_INVOCATION_RAW_DATA where ELECTED_RESOURCE like '%banking%' AND ELECTED_RESOURCE not like '%products%' AND CUSTOMER_STATUS = 'attended' AND (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS CONSUMER_ENDPOINT_CALLS_BY_USER, ( select COUNT(*) from API_INVOCATION_RAW_DATA where ELECTED_RESOURCE like '%banking%' AND ELECTED_RESOURCE not like '%products%' AND CUSTOMER_STATUS = 'unattended' AND (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS CONSUMER_ENDPOINT_CALLS_BY_ADR from dual", time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000 )
select MESSAGE_ID, BANKING_ENDPOINT_CALLS, PRODUCT_ENDPOINT_CALLS, CONSUMER_ENDPOINT_CALLS_BY_USER, CONSUMER_ENDPOINT_CALLS_BY_ADR
insert into TotalInvocationsStream;

from StatusCheckStream#window.timeBatch(1 sec)#rdbms:query('OB_REPORTING_DB', 'TOO_MANY_REQUESTS LONG, FORBIDDEN LONG, BAD_REQUEST LONG, UNAUTHORIZED LONG, NOT_FOUND LONG, NOT_ACCEPTABLE LONG, UNPROCESSABLE LONG', 'select ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=429 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS TOO_MANY_REQUESTS, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=403 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS FORBIDDEN, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=400 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS BAD_REQUEST, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=401 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS UNAUTHORIZED, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=404 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS NOT_FOUND, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=406 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS NOT_ACCEPTABLE, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_CODE=422 and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS UNPROCESSABLE from dual', time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000, time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000 )
select MESSAGE_ID, TOO_MANY_REQUESTS,  FORBIDDEN, BAD_REQUEST, UNAUTHORIZED, NOT_FOUND, NOT_ACCEPTABLE, UNPROCESSABLE
insert into FailureInvocationsStream;

from StatusCheckStream#window.timeBatch(1 sec)#rdbms:query('OB_REPORTING_DB', 'INVALID_ADR_STATUS LONG, INVALID_ADR_SOFTWARE_PRODUCT_STATUS LONG, INVALID_CONSENT_STATUS LONG, CONSENT_IS_REVOKED LONG, UNSUPPORTED_VERSION LONG, INVALID_BANKING_ACCOUNT LONG, UNAVAILABLE_BANKING_ACCOUNT LONG, INVALID_RESOURCE LONG', "select ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Entitlements.InvalidAdrStatus' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS INVALID_ADR_STATUS, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Entitlements.InvalidAdrSoftwareProductStatus' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS INVALID_ADR_SOFTWARE_PRODUCT_STATUS, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Entitlements.InvalidConsentStatus' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS INVALID_CONSENT_STATUS, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Entitlements.ConsentIsRevoked' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS CONSENT_IS_REVOKED, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Unsupported.Version' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS UNSUPPORTED_VERSION, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Resource.InvalidBankingAccount' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS INVALID_BANKING_ACCOUNT, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Resource.UnavailableBankingAccount' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS UNAVAILABLE_BANKING_ACCOUNT, ( select COUNT(*) from   API_INVOCATION_RAW_DATA where STATUS_MESSAGE = 'AU.CDR.Resource.InvalidResource' and (TIMESTAMP >= ?) AND (TIMESTAMP < ?)) AS INVALID_RESOURCE from dual", time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000 , time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000, time: timestampInMilliseconds (fromDate)/1000,time: timestampInMilliseconds (toDate)/1000 )
select MESSAGE_ID, INVALID_ADR_STATUS,  INVALID_ADR_SOFTWARE_PRODUCT_STATUS, INVALID_CONSENT_STATUS, CONSENT_IS_REVOKED, UNSUPPORTED_VERSION, INVALID_BANKING_ACCOUNT, UNAVAILABLE_BANKING_ACCOUNT, INVALID_RESOURCE
insert into CDRRuleViolationsStream;

from TotalInvocationsStream#env:resourceIdentifier('status-check')#window.timeBatch(1 sec) as a
join FailureInvocationsStream#window.timeBatch(1 sec) as s on a.MESSAGE_ID == s.MESSAGE_ID
select a.MESSAGE_ID as MESSAGE_ID, a.BANKING_ENDPOINT_CALLS , a.PRODUCT_ENDPOINT_CALLS, a.CONSUMER_ENDPOINT_CALLS_BY_USER, a.CONSUMER_ENDPOINT_CALLS_BY_ADR , s.TOO_MANY_REQUESTS, s.FORBIDDEN, s.BAD_REQUEST, s.UNAUTHORIZED, s.NOT_FOUND, s.NOT_ACCEPTABLE, s.UNPROCESSABLE
insert into StatusResultStream1;

from StatusResultStream1 as a
join CDRRuleViolationsStream#window.timeBatch(1 sec) as s on a.MESSAGE_ID == s.MESSAGE_ID
select a.MESSAGE_ID, a.BANKING_ENDPOINT_CALLS, a.PRODUCT_ENDPOINT_CALLS, a.CONSUMER_ENDPOINT_CALLS_BY_USER, a.CONSUMER_ENDPOINT_CALLS_BY_ADR , a.TOO_MANY_REQUESTS, a.FORBIDDEN, a.BAD_REQUEST, a.UNAUTHORIZED, a.NOT_FOUND, a.NOT_ACCEPTABLE, a.UNPROCESSABLE, s.INVALID_ADR_STATUS, s.INVALID_ADR_SOFTWARE_PRODUCT_STATUS, s.INVALID_CONSENT_STATUS, s.CONSENT_IS_REVOKED, s.UNSUPPORTED_VERSION, s.INVALID_BANKING_ACCOUNT, s.UNAVAILABLE_BANKING_ACCOUNT, s.INVALID_RESOURCE
insert into StatusResultStream2;

@info(name='sendResponse')
from StatusResultStream2#window.env:resourceBatch("status-check", MESSAGE_ID, 60000)
select MESSAGE_ID as MESSAGE_ID, getBankingAPIInvocationsObject(BANKING_ENDPOINT_CALLS, PRODUCT_ENDPOINT_CALLS, CONSUMER_ENDPOINT_CALLS_BY_USER, CONSUMER_ENDPOINT_CALLS_BY_ADR) as RECEIVED_REQUESTS, getErrorCountsObject(TOO_MANY_REQUESTS, FORBIDDEN, BAD_REQUEST, UNAUTHORIZED, NOT_FOUND, NOT_ACCEPTABLE, UNPROCESSABLE) as FAULTY_INVOCATIONS, getCDRRuleViolations(INVALID_ADR_STATUS, INVALID_ADR_SOFTWARE_PRODUCT_STATUS, INVALID_CONSENT_STATUS, CONSENT_IS_REVOKED, UNSUPPORTED_VERSION, INVALID_BANKING_ACCOUNT, UNAVAILABLE_BANKING_ACCOUNT, INVALID_RESOURCE) as CDR_RULE_VIOLATIONS
insert into OutputStream;
